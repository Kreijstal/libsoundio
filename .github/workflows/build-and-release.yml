name: Build and Release

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    outputs:
      os: ${{ matrix.os }}
      sys: ${{ matrix.sys || 'native' }}
      artifact_name: build-output-${{ matrix.os }}-${{ matrix.sys || 'native' }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            sys: MINGW64
          - os: windows-latest
            sys: UCRT64
          - os: windows-latest
            sys: CLANG64

    steps:
    - uses: actions/checkout@v4

    - name: Install CMake (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y cmake build-essential

    - name: Setup MSYS2 (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        update: true
        install: >-
          base-devel
          git
        pacboy: >-
          cmake:p
          make:p
          cc:p
          7zip:p

    - name: Debug cache key
      run: |
        echo "Cache key: build-${{ runner.os }}-${{ matrix.sys || 'native' }}"
        echo "Restore keys:"
        echo "build-${{ runner.os }}-${{ matrix.sys || 'native' }}"
        echo "build-${{ runner.os }}-"

    - name: Restore build cache
      uses: actions/cache@v4
      id: build-cache
      with:
        path: build
        key: build-${{ runner.os }}-${{ matrix.sys || 'native' }}
        restore-keys: |
          build-${{ runner.os }}-${{ matrix.sys || 'native' }}

    - name: Configure CMake (non-Windows)
      if: runner.os != 'Windows' && steps.build-cache.outputs.cache-hit != 'true'
      shell: bash
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows' && steps.build-cache.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Build (non-Windows)
      if: runner.os != 'Windows' && steps.build-cache.outputs.cache-hit != 'true'
      shell: bash
      run: cmake --build build --config Release

    - name: Build (Windows)
      if: runner.os == 'Windows' && steps.build-cache.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: cmake --build build --config Release

    - name: Create install package (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        mkdir -p build/install
        cmake --install build --prefix build/install
        tar -czvf build/soundio-${{ runner.os }}-${{ matrix.sys || 'native' }}.tar.gz -C build/install .

    - name: Create install package (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        mkdir -p build/install
        cmake --install build --prefix build/install
        tar -czvf build/soundio-${{ runner.os }}-${{ matrix.sys || 'native' }}.tar.gz -C build/install .

    - name: Create install package (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        mkdir -p build/install
        cmake --install build --prefix build/install
        tar -czvf build/soundio-${{ runner.os }}-${{ matrix.sys || 'native' }}.tar.gz -C build/install .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ matrix.os }}-${{ matrix.sys || 'native' }}
        path: build/*.tar.gz
        retention-days: 7
        overwrite: true
        compression-level: 0

  release:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          pattern: build-output-*
          merge-multiple: true

      - name: Debug downloaded artifacts
        shell: bash
        run: |
          echo "Downloaded files:"
          find artifacts -type f -exec ls -lh {} \; || echo "No files found"
          echo ""
          echo "Artifacts directory size:"
          du -sh artifacts || echo "No artifacts directory found"

      - name: Determine release type
        id: release-type
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            RELEASE_TYPE=release
          else
            SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
            TAG=nightly-${SHORT_SHA}
            RELEASE_TYPE=pre-release
          fi
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-type.outputs.TAG }}
          name: ${{ steps.release-type.outputs.TAG }}
          prerelease: ${{ steps.release-type.outputs.RELEASE_TYPE == 'pre-release' }}
          body: |
            Automated ${{ steps.release-type.outputs.RELEASE_TYPE }} build
            Built from: ${{ github.sha }}
          generate_release_notes: true
          files: artifacts/soundio-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
