name: Build and Release

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']
  
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            sys: MINGW64
          - os: windows-latest
            sys: UCRT64
          - os: windows-latest
            sys: CLANG64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install CMake (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y cmake build-essential

    - name: Install CMake (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake

    - name: Setup MSYS2 (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.sys }}
        update: true
        install: >-
          base-devel
          git
          cmake
        pacboy: >-
          cmake:p
          make:p
          cc:p
          7zip:p
    
    - name: Restore build cache
      uses: actions/cache@v3
      id: cache
      with:
        path: build
        key: ${{ runner.os }}-${{ matrix.sys || 'native' }}-${{ hashFiles('**/CMakeLists.txt', '**/src/*') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.sys || 'native' }}-

    - name: Configure CMake (non-Windows)
      if: runner.os != 'Windows' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows' && steps.cache.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
    
    - name: Build (non-Windows)
      if: runner.os != 'Windows' && steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: cmake --build build --config Release
      
    - name: Build (Windows)
      if: runner.os == 'Windows' && steps.cache.outputs.cache-hit != 'true'
      shell: msys2 {0}
      run: cmake --build build --config Release
    
    - name: Package build artifacts (non-Windows)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        mkdir -p build/package
        cmake --install build --prefix build/package
        tar -czvf build/package.tar.gz build/package/*
        
    - name: Package build artifacts (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        mkdir -p build/package
        cmake --install build --prefix build/package
        7z a build/package.zip build/package/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-${{ runner.os }}-${{ matrix.sys || 'native' }}
        path: build/package.*
        if-no-files-found: error
        retention-days: 1
    
  release:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: package-*
          merge-multiple: true
          
      - name: Determine release type
        id: release-type
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF | cut -d'/' -f3)
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          echo "RELEASE_TYPE=pre-release" >> $GITHUB_OUTPUT
          echo "TAG=${BRANCH_NAME}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-type.outputs.TAG }}
          name: ${{ steps.release-type.outputs.TAG }}
          prerelease: true
          body: |
            Automated pre-release build
          generate_release_notes: true
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
